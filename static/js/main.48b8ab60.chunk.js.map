{"version":3,"sources":["components/Person.js","components/PersonsList.js","containers/App.js","serviceWorker.js","index.js"],"names":["Person","id","name","email","website","className","alt","src","PersonsList","personsArray","Fragment","map","user","key","username","App","state","persons","fetch","then","response","json","users","setState","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sSAkBeA,EAfA,SAAC,GAA4B,IAA3BC,EAA0B,EAA1BA,GAAGC,EAAuB,EAAvBA,KAAKC,EAAkB,EAAlBA,MAAMC,EAAY,EAAZA,QAC9B,OACQ,yBAAKC,UAAW,kDACX,yBAAKA,UAAU,MAAMC,IAAI,SAAQC,IAAG,wDAAmDN,EAAnD,UACvC,6BACC,4BAAKC,GACL,oCAAUC,GACV,sCAAYC,MCqBTI,G,MA3BK,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,aAErB,OACO,kBAAC,IAAMC,SAAP,KACC,yBAAKL,UAAU,kBAEXI,EAAaE,KAAI,SAAAC,GAChB,OAAO,kBAAC,EAAD,CACPC,IAAKD,EAAKX,GACVA,GAAKW,EAAKX,GACVC,KAAMU,EAAKE,SACXX,MAAOS,EAAKT,MACZC,QAASQ,EAAKR,iBCQbW,G,kNAlBbC,MAAQ,CACNC,QAAS,I,kEAGU,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAAEN,QAASK,S,+BAG1C,OACE,6BACE,wBAAIjB,UAAU,MAAd,iBACA,kBAAC,EAAD,CAAaI,aAAce,KAAKR,MAAMC,e,GAd5BQ,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlB,MAAK,SAAAmB,GACjCA,EAAaC,kB","file":"static/js/main.48b8ab60.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Person = ({id,name,email,website}) =>{\n\treturn(\n         <div className= 'tc bg-light-blue br3 pa3 ma2 grow bw2 shadow-5'>\n              <img className='br3' alt='person'src={`https://randomuser.me/api/portraits/thumb/men/${id}.jpg`}/>\n           <div>\n            <h2>{name}</h2>\n            <p>Email:{email}</p>\n            <p>Website:{website}</p>\n            </div>\n          </div>\n\n\t\t)\n}\n\n\nexport default Person;","import React from 'react';\nimport Person from './Person';\nimport './PersonsList.css';\n\nconst PersonsList = ({personsArray}) =>{\n\t  \n\treturn(\n        <React.Fragment>\n         <div className='grid-container'>\n           {\n             personsArray.map(user=>{\n             \treturn <Person\n             \tkey={user.id} \n             \tid= {user.id}\n             \tname={user.username}\n             \temail={user.email}\n             \twebsite={user.website}\n\n             \t />\n             \t\n             \t\n             \t\n             })\n\n           }\n          </div>\n       </React.Fragment>\n\t\t)\n}\n\n\nexport default PersonsList;","import React, { Component } from \"react\";\nimport PersonsList from \"../components/PersonsList\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    persons: []\n  };\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(response => response.json())\n      .then(users => this.setState({ persons: users }));\n  }\n  render() {\n    return (\n      <div>\n        <h1 className=\"tc\">Personal List</h1>\n        <PersonsList personsArray={this.state.persons} />\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}